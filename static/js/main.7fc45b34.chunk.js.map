{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","dlugosc","szerokosc","wysokosc","tektura","bigi","X","Y","bigiFabryczne","handelChange","e","_this","setState","Object","defineProperty","target","id","value","handleSelect","handleClick","react_default","a","createElement","Math","ceil","className","this","onChange","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fc45b34.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    dlugosc: \"\",\n    szerokosc: '',\n    wysokosc: '',\n    tektura: 'C',\n    bigi: '',\n    X: '',\n    Y: '',\n    bigiFabryczne: \"\"\n  }\n\n\n  handelChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    }\n    )\n  }\n  handleSelect = e => {\n    this.setState({\n      tektura: e.target.value,\n    }\n    )\n  }\n\n  handleClick = () => {\n    if (this.state.tektura === \"BC\") {\n      this.setState({\n        bigi: <p>10// {this.state.szerokosc * 1 + 1} v {this.state.dlugosc * 1 + 1} v {this.state.szerokosc * 1 + 1} v {this.state.dlugosc * 1 - 1} v 30</p>,\n        X: (this.state.dlugosc * 1 + this.state.szerokosc * 1) * 2 + 72,\n        bigiFabryczne: <p>{Math.ceil(this.state.szerokosc / 2 + 4)} v {this.state.wysokosc * 1 + 10} v {Math.ceil(this.state.szerokosc / 2 + 4)} </p>,\n        Y: Math.ceil(this.state.szerokosc / 2 + 4) + this.state.wysokosc * 1 + 10 + Math.ceil(this.state.szerokosc / 2 + 4)\n      })\n\n    } else if (this.state.tektura === \"C\") {\n      this.setState({\n        bigi: <p>10// {this.state.szerokosc} v {this.state.dlugosc - 1} v {this.state.szerokosc - 1} v {this.state.dlugosc - 1} v 30</p>,\n        X: this.state.szerokosc * 1 + this.state.dlugosc * 1 - 1 + this.state.szerokosc * 1 - 1 + this.state.dlugosc * 1 - 1 + 68,\n        bigiFabryczne: <p>{Math.ceil(this.state.szerokosc / 2 + 3)} v {this.state.wysokosc * 1 + 6} v {Math.ceil(this.state.szerokosc / 2 + 3)} </p>,\n        Y: Math.ceil(this.state.szerokosc / 2 + 3) + this.state.wysokosc * 1 + 6 + Math.ceil(this.state.szerokosc / 2 + 3)\n\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <select value={this.state.tektura} onChange={this.handleSelect}>\n          <option value=\"C\">C</option>\n          <option value=\"BC\">BC</option>\n        </select>\n        <input type='number' id='dlugosc' value={this.state.dlugosc} onChange={this.handelChange}></input>\n        <input type='number' id='szerokosc' onChange={this.handelChange}></input>\n        <input type='number' id='wysokosc' onChange={this.handelChange}></input>\n        <button onClick={this.handleClick}>Policz</button>\n        {this.state.bigi ? <h4>Bigi:</h4> : null}\n        {this.state.bigi}\n        {this.state.bigiFabryczne ? <h4>Bigi fabryczne:</h4> : null}\n        {this.state.bigiFabryczne}\n        {this.state.X && this.state.Y ? <h4>Formatka:</h4> : null}\n        {this.state.X} {this.state.X && this.state.Y ? 'X' : null} {this.state.Y}\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}